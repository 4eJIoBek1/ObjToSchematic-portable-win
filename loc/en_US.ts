// Credits:
// LucasDower

import { TLocaleDefinition } from './base';

export const en_US: TLocaleDefinition = {
    display_name: 'American English',
    language_code: 'en_US',
    translations: {
        something_went_wrong: 'US Something unexpectedly went wrong',
        init: {
            initialising: 'US Initialising...',
            ready: 'US Ready',
        },
        settings: {
            heading: 'US SETTINGS',
            components: {
                language: 'US Language',
            },
            changing_language: 'US Changing languages...',
            changed_language: 'US Changed language',
        },
        import: {
            heading: 'US 1. IMPORT',
            button: 'US Load mesh',
            importing_mesh: 'US Importing mesh...',
            imported_mesh: 'US Imported mesh',
            rendering_mesh: 'US Rendering mesh...',
            rendered_mesh: 'US Rendered mesh',
            no_vertices_loaded: 'US No vertices were loaded',
            no_triangles_loaded: 'US No triangles were loaded',
            could_not_scale_mesh: 'US Could not scale mesh correctly - mesh is likely 2D, rotate it so that it has a non-zero height',
            invalid_encoding: 'US Unrecognised character found, please encode using UTF-8',
            invalid_face_data: 'US Face data has unexpected number of vertex data: {{count, number}}',
            too_many_triangles: 'US The imported mesh has {{count, number}} triangles, consider simplifying it in a DDC such as Blender',
            vertex_triangle_count: 'US {{vertex_count, number}} vertices, {{triangle_count, number}} triangles',
            missing_normals: 'US Some vertices do not have their normals defined, this may cause voxels to be aligned incorrectly',
            failed_to_parse_line: 'US Failed attempt to parse "{{line}}", because "{{error}}"',
            components: {
                input: 'US 3D Model (.obj, .gltf/.glb)',
                rotation: 'US Rotation',
            },
        },
        materials: {
            heading: 'US 2. MATERIALS',
            button: 'US Update materials',
            updating_materials: 'US Updating materials...',
            updated_materials: 'US Updated materials',
            components: {
                'no_materials_loaded': 'US No materials loaded',
                'material_type': 'US Type',
                'texture_filtering': 'US Filtering',
                'texture_wrap': 'US Wrap',
                'transparency': 'US Transparency',
                'diffuse_map': 'US Diffuse map',
                'alpha': 'US Alpha',
                'alpha_map': 'US Alpha map',
                'alpha_channel': 'US Alpha channel',
                'linear': 'US Linear',
                'nearest': 'US Nearest',
                'clamp': 'US Clamp',
                'repeat': 'US Repeat',
                'none': 'US None',
                'alpha_constant': 'US Alpha constant',
                'diffuse_map_alpha_channel': 'US Diffuse map alpha channel',
            },
        },
        voxelise: {
            heading: 'US 3. VOXELISE',
            button: 'US Voxelise mesh',
            loading_voxel_mesh: 'US Loading voxel mesh...',
            loaded_voxel_mesh: 'US Loaded voxel mesh',
            rendering_voxel_mesh: 'US Rendering voxel mesh...',
            rendered_voxel_mesh: 'US Rendered voxel mesh',
            voxel_count: 'US {{count, number}} voxels',
            voxel_mesh_dimensions: 'US Dimensions are {{x, number}} x {{y, number}} x {{z, number}}',
            components: {
                constraint_axis: 'US Constraint axis',
                size: 'US Size',
                algorithm: 'US Algorithm',
                ambient_occlusion: 'US Ambient occlusion',
                multisampling: 'US Multisampling',
                voxel_overlap: 'US Voxel overlap',
                colour: 'US Colour',
                x_axis: 'US X (width) (red)',
                y_axis: 'US Y (height) (green)',
                z_axis: 'US Z (depth) (blue)',
                ray_based: 'US Ray-based',
                bvh_ray: 'US BVH Ray-based',
                ncrb: 'US NCRB',
                average_recommended: 'US Average (recommended)',
                first: 'US First',
            },
        },
        assign: {
            heading: 'US 3. ASSIGN',
            button: 'US Assign blocks',
            loading_block_mesh: 'US Loading block mesh...',
            loaded_block_mesh: 'US Loaded block mesh',
            rendering_block_mesh: 'US Rendering block mesh...',
            rendered_block_mesh: 'US Rendered block mesh',
            deselected_blocks: 'US Deselected {{count, number}} blocks',
            selected_blocks: 'US Selected {{count, number}} blocks',
            found_blocks: 'US Found {{count, number}} blocks',
            block_not_namespaced: 'US "{{block_name}}" is not namespaced correctly, do you mean "minecraft:{{block_name}}"?',
            could_not_use_block: 'US Could not use "{{block_name}}" as it is unsupported',
            reading_palette: 'US Reading {{file_name}}...',
            block_palette_missing_light_blocks: 'US Block palette contains no light blocks to place',
            blocks_missing_textures: 'US {{count, number}} palette block(s) are missing atlas textures, they will not be used',
            falling_blocks: 'US {{count, number}} blocks will fall due to gravity when this structure is placed',
            components: {
                texture_atlas: 'US Texture atlas',
                block_palette: 'US Block palette',
                dithering: 'US Dithering',
                dithering_magnitude: 'US Dithering magnitude',
                fallable_blocks: 'US Fallable blocks',
                colour_accuracy: 'US Colour accuracy',
                smart_averaging: 'US Smart averaging',
                smoothness: 'US Smoothness',
                calculate_lighting: 'US Calculate lighting',
                light_threshold: 'US Light threshold',
                vanilla: 'US Vanilla',
                ordered: 'US Ordered',
                random: 'US Random',
                off: 'US Off',
                replace_falling: 'US Replace falling with solid',
                replace_fallable: 'US Replace fallable with solid',
                do_nothing: 'US Do nothing',
                search: 'US Search...',
            },
        },
        export: {
            heading: 'US 5. EXPORT',
            button: 'US Export structure',
            exporting_structure: 'US Exporting structure...',
            exported_structure: 'US Exported structure',
            schematic_unsupported_blocks: 'US {{count, number}} blocks ({{unique, number}} unique) are not supported by the .schematic format, Stone blocks will used instead. Try using the schematic-friendly palette, or export using .litematica',
            nbt_exporter_too_big: 'US Structure blocks only support structures of size 48x48x48, blocks outside this range will be removed',
            components: {
                exporter: 'US Exporter',
                litematic: 'US Litematic (.litematic)',
                schematic: 'US Schematic (.schematic)',
                sponge_schematic: 'US Sponge Schematic (.schem)',
                structure_blocks: 'US Structure blocks (.nbt)',
                indexed_json: 'US Indexed JSON (.json)',
                uncompressed_json: 'US Uncompressed JSON (.json)',
            },
        },
        misc: {
            red: 'US Red',
            green: 'US Green',
            blue: 'US Blue',
            alpha: 'US Alpha',
            on: 'US On',
            off: 'US Off',
        },
    },
};
